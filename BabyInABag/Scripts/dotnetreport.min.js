/// .Net Report Builder view model v2.0.6
/// License has to be purchased for use
/// 2015-2018 (c) www.dotnetreport.com

function pagerViewModel(e) { e = e || {}; var r = this; r.pageSize = ko.observable(e.pageSize || 30), r.pages = ko.observable(e.pages || 1), r.currentPage = ko.observable(e.currentPage || 1), r.pauseNavigation = ko.observable(!1), r.totalRecords = ko.observable(0), r.sortColumn = ko.observable(), r.sortDescending = ko.observable(), r.isFirstPage = ko.computed(function () { return 1 == this.currentPage() }, r), r.isLastPage = ko.computed(function () { return this.currentPage() == this.pages() }, r), r.currentPage.subscribe(function (e) { e > r.pages() && r.currentPage(0 == r.pages() ? 1 : r.pages()), e < 1 && r.currentPage(1) }), r.previous = function () { r.pauseNavigation() || r.isFirstPage() || isNaN(r.currentPage()) || r.currentPage(Number(r.currentPage()) - 1) }, r.next = function () { r.pauseNavigation() || r.isLastPage() || isNaN(r.currentPage()) || r.currentPage(Number(r.currentPage()) + 1) }, r.first = function () { r.pauseNavigation() || r.currentPage(1) }, r.last = function () { r.pauseNavigation() || r.currentPage(r.pages()) }, r.changeSort = function (e) { r.sortColumn() == e ? r.sortDescending(!r.sortDescending()) : r.sortDescending(!1), r.sortColumn(e), 1 != r.currentPage() && r.currentPage(1) } } function formulaFieldViewModel(e) { e = e || {}; var r = this; r.fieldId = ko.observable(e.fieldId), r.isParenthesesStart = ko.observable(e.isParenthesesStart), r.isParenthesesEnd = ko.observable(e.isParenthesesEnd), r.formulaOperation = ko.observable(e.formulaOperation), r.isConstantValue = ko.observable(!!e.constantValue), r.constantValue = ko.observable(e.constantValue) } var reportViewModel = function (l) { var s = this; (l = l || {}).userId = l.userId || "", s.ReportName = ko.observable(), s.ReportType = ko.observable("List"), s.ReportDescription = ko.observable(), s.FolderID = ko.observable(), s.ReportID = ko.observable(), s.Tables = ko.observableArray([]), s.SelectedTable = ko.observable(), s.ChooseFields = ko.observableArray([]), s.ChosenFields = ko.observableArray([]), s.SelectedFields = ko.observableArray([]), s.SelectFields = ko.observableArray([]), s.SelectedField = ko.observable(), s.AdditionalSeries = ko.observableArray([]), s.IncludeSubTotal = ko.observable(!1), s.ShowUniqueRecords = ko.observable(!1), s.AggregateReport = ko.observable(!1), s.SortByField = ko.observable(), s.Filters = ko.observableArray([]), s.SaveReport = ko.observable(!0), s.ShowDataWithGraph = ko.observable(!0), s.ShowOnDashboard = ko.observable(!1), s.ReportMode = ko.observable(l.reportMode || "start"), s.Folders = ko.observableArray(), s.SavedReports = ko.observableArray([]), s.SelectedFolder = ko.observable(null), s.CanSaveReports = ko.observable(!0), s.CanManageFolders = ko.observable(!0), s.CanEdit = ko.observable(!0), s.ReportResult = ko.observable({ HasError: ko.observable(!1), ReportDebug: ko.observable(!1), Exception: ko.observable(), Warnings: ko.observable(), ReportSql: ko.observable(), ReportData: ko.observable(null) }), s.pager = new pagerViewModel, s.currentSql = ko.observable(), s.currentConnectKey = ko.observable(), s.pager.currentPage.subscribe(function () { s.ExecuteReportQuery(s.currentSql(), s.currentConnectKey()) }), s.createNewReport = function () { s.clearReport(), s.ReportMode("generate") }, s.ReportType.subscribe(function (e) { "List" == e ? s.AggregateReport(!1) : s.AggregateReport(!0) }), s.setReportType = function (e) { s.ReportType(e) }, s.cancelCreateReport = function () { bootbox.confirm("Are you sure you would like to cancel editing this Report?", function (e) { e && (s.clearReport(), l.reportWizard.modal("hide"), s.ReportMode("start")) }) }, s.FlyFilters = ko.computed(function () { return $.grep(s.Filters(), function (e) { return e.IsFilterOnFly }) }), s.enabledFields = ko.computed(function () { return $.grep(s.SelectedFields(), function (e) { return !e.disabled() }) }), s.ManageFolder = { FolderName: ko.observable(), IsNew: ko.observable(!1), newFolder: function () { s.ManageFolder.IsNew(!0), s.ManageFolder.FolderName(""), $("#folderModal").modal("show") }, editFolder: function () { null != s.SelectedFolder() ? 0 != s.SelectedFolder().Id ? (s.ManageFolder.IsNew(!1), s.ManageFolder.FolderName(s.SelectedFolder().FolderName), $("#folderModal").modal("show")) : toastr.error("Cannot edit Default folder") : toastr.error("Please choose a folder first") }, saveFolder: function () { if ("" != s.ManageFolder.FolderName()) { var r = s.ManageFolder.IsNew() ? 0 : s.SelectedFolder().Id; if (0 != $.grep(s.Folders(), function (e) { return e.FolderName.toLowerCase() == s.ManageFolder.FolderName().toLowerCase() && (0 == r || 0 != r && e.Id != r) }).length) return toastr.error("Folder name is already in use, please choose a different Folder Name"), !1; ajaxcall({ url: l.apiUrl + "/ReportApi/SaveFolder", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, folderId: r, folderName: s.ManageFolder.FolderName(), userId: l.userId } }).done(function (e) { if (s.ManageFolder.IsNew()) s.Folders.push({ Id: e, FolderName: s.ManageFolder.FolderName() }); else { var r = s.SelectedFolder(); s.Folders.remove(s.SelectedFolder()), r.FolderName = s.ManageFolder.FolderName(), s.Folders.push(r) } $("#folderModal").modal("hide") }) } else toastr.error("Please enter a Folder Name") }, deleteFolder: function () { null != s.SelectedFolder() ? 0 != s.SelectedFolder().Id ? bootbox.confirm("Are you sure you want to delete this Folder?\n\nWARNING: Deleting a folder will delete all reports and this action cannot be undone.", function (e) { e && ajaxcall({ url: l.apiUrl + "/ReportApi/DeleteFolder", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, folderId: s.SelectedFolder().Id, userId: l.userId } }).done(function () { s.Folders.remove(s.SelectedFolder()), s.SelectedFolder(null) }) }) : toastr.error("Cannot delete Default folder") : toastr.error("Please choose a folder first") } }, s.reportsInFolder = ko.computed(function () { return null == s.SelectedFolder() ? [] : $.grep(s.SavedReports(), function (e) { return e.folderId == s.SelectedFolder().Id }) }), s.clearReport = function () { s.ReportName(""), s.ReportDescription(""), s.ReportType("List"), s.FolderID(null == s.SelectedFolder() ? 0 : s.SelectedFolder().Id), s.ChosenFields([]), s.SelectedFields([]), s.SelectFields([]), s.SelectedField(null), s.IncludeSubTotal(!1), s.ShowUniqueRecords(!1), s.AggregateReport(!1), s.SortByField(null), s.Filters([]), s.ReportID(0), s.SaveReport(s.CanSaveReports()) }, s.SelectedTable.subscribe(function (t) { null != t ? ajaxcall({ url: l.apiUrl + "/ReportApi/GetFields", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, tableId: t.tableId } }).done(function (e) { var r = $.map(e, function (r, e) { var o = $.grep(s.SelectedFields(), function (e) { return e.fieldId == r.fieldId }); return 0 < o.length ? o[0] : (r.tableName = t.tableName, s.setupField(r)) }); s.ChooseFields(r) }) : s.ChooseFields([]) }), s.MoveChosenFields = function () { $.each(s.ChosenFields(), function (e, r) { 0 < $.grep(s.SelectedFields(), function (e) { return e.fieldId == r.fieldId }).length ? toastr.error(r.fieldName + " is already Selected") : s.SelectedFields.push(r) }) }, s.MoveAllFields = function () { $.each(s.ChooseFields(), function (e, r) { 0 === $.grep(s.SelectedFields(), function (e) { return e.fieldId == r.fieldId }).length && s.SelectedFields.push(r) }) }, s.RemoveSelectedFields = function () { $.each(s.ChooseFields(), function (e, r) { s.SelectedFields.remove(r) }) }, s.isFormulaField = ko.observable(!1), s.formulaFields = ko.observableArray([]), s.formulaFieldLabel = ko.observable(""), s.getEmptyFormulaField = function () { return { tableName: "Custom", fieldName: s.formulaFieldLabel() || "Custom", fieldType: "Custom", aggregateFunction: "", filterOnFly: !1, disabled: !1, groupInGraph: !1, hideInDetail: !1, fieldAggregate: ["Group", "Count"], fieldAggregateWithDrilldown: ["Group", "Count"], isFormulaField: !0, hasForeignKey: !1, fieldFilter: ["=", "<>", ">=", ">", "<", "<="], formulaItems: s.formulaFields() } }, s.selectedFieldsCanFilter = ko.computed(function () { return $.grep(s.SelectedFields(), function (e) { return !e.isFormulaField() }) }), s.clearFormulaField = function () { s.formulaFields([]), s.formulaFieldLabel("") }, s.isFormulaField.subscribe(function () { s.clearFormulaField() }), s.saveFormulaField = function () { if (0 != s.formulaFields().length) if (s.validateReport()) { var e = s.getEmptyFormulaField(); s.SelectedFields.push(s.setupField(e)), s.clearFormulaField(), s.isFormulaField(!1) } else toastr.error("Please correct validation issues"); else toastr.error("Please select some items for the Custom Field") }, s.showFormulaOperation = function (e) { var r = s.formulaFields().length; return !(r <= 1 || e == r - 1) && (!s.formulaFields()[e + 1].setupFormula.isParenthesesEnd() && !s.formulaFields()[e].setupFormula.isParenthesesStart()) }, s.addFormulaParentheses = function () { if (!(s.formulaFields().length <= 0 || s.formulaFields()[0].setupFormula.isParenthesesStart() && s.formulaFields()[s.formulaFields().length - 1].setupFormula.isParenthesesEnd())) { var e = s.getEmptyFormulaField(), r = s.setupField(Object.assign({}, e)), o = s.setupField(Object.assign({}, e)); r.setupFormula.isParenthesesStart(!0), o.setupFormula.isParenthesesEnd(!0), s.formulaFields.splice(0, 0, r), s.formulaFields.push(o) } }, s.addFormulaConstantValue = function () { var e = s.getEmptyFormulaField(), r = s.setupField(Object.assign({}, e)); r.setupFormula.isConstantValue(!0), s.formulaFields.push(r) }, s.isFieldValidForYAxis = function (e, r) { return !(0 < e && "Bar" == s.ReportType() && ["Int", "Double", "Money"].indexOf(r) < 0) }, s.isChart = ko.computed(function () { return ["List", "Summary"].indexOf(s.ReportType()) < 0 }), s.isFieldValidForSubGroup = function (e, r) { return !(0 < e && ["Int", "Double", "Money"].indexOf(r) < 0) }, s.canDrilldown = ko.computed(function () { return ["List"].indexOf(s.ReportType()) < 0 }), s.dateFields = ko.computed(function () { return $.grep(s.SelectedFields(), function (e) { return "DateTime" == e.fieldType }) }), s.canAddSeries = ko.computed(function () { var e = 0 < s.dateFields().length && 0 <= ["Bar", "Line"].indexOf(s.ReportType()), r = 0 < $.grep(s.Filters(), function (e) { return "range" == e.Operator() && e.Value() && 0 == e.Value().indexOf("This") }).length; return e && r }), s.canAddSeries.subscribe(function (e) { e || s.AdditionalSeries([]) }), s.AddSeries = function (e) { e = e || {}; var o = ko.observable(); e.FieldId ? o(s.FindField(e.FieldId)) : o(s.dateFields()[0]); var r = ko.observableArray([]); function t(e) { r("This Year" == e ? ["Last Year", "2 Years ago", "3 Years ago", "4 Years ago", "5 Years ago"] : "This Month" == e ? ["Last Month", "2 Months ago", "3 Months ago", "4 Months ago", "5 Months ago"] : "This Week" == e ? ["Last Week", "2 Weeks ago", "3 Weeks ago", "4 Weeks ago", "5 Weeks ago"] : []) } $.each(s.Filters(), function (e, r) { if (r.Field().FieldId == o().FieldId) return t(r.Value()), r.Value.subscribe(function (e) { t(e) }), !1 }), s.AdditionalSeries.push({ Field: o, Operator: ko.observable("Range"), Value: ko.observable(e.Value), Range: r }) }, s.canMoveUp = function () { return 1 == s.SelectFields().length && 1 <= s.SelectedFields.indexOf(s.SelectFields()[0]) }, s.canMoveDown = function () { return 1 == s.SelectFields().length && s.SelectedFields.indexOf(s.SelectFields()[0]) < s.SelectedFields().length - 1 }, s.MoveUp = function () { if (s.canMoveUp()) { var e = s.SelectFields()[0], r = s.SelectedFields.indexOf(e); if (1 <= r) { var o = s.SelectedFields(); s.SelectedFields.splice(r - 1, 2, o[r], o[r - 1]) } } }, s.MoveDown = function () { if (s.canMoveDown()) { var e = s.SelectFields()[0], r = s.SelectedFields.indexOf(e), o = s.SelectedFields(); r < o.length - 1 && s.SelectedFields.splice(r, 2, o[r + 1], o[r]) } }, s.AddFilter = function (e, r) { e = e || {}; var o = ko.observableArray([]); e.Value1 && o.push({ id: e.Value1, text: e.Value1 }), e.Value2 && o.push({ id: e.Value2, text: e.Value2 }); var t = ko.observable(); t.subscribe(function (e) { e && e.hasForeignKey && ajaxcall({ url: l.apiUrl + "/ReportApi/GetLookupList", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, fieldId: e.fieldId } }).done(function (e) { ajaxcall({ type: "POST", url: l.lookupListUrl, data: JSON.stringify({ lookupSql: e.sql, connectKey: e.connectKey }) }).done(function (e) { e.d && (e = e.d), o(e) }) }) }), e.FieldId && t(s.FindField(e.FieldId)), s.Filters.push({ AndOr: ko.observable(r ? " AND " : e.AndOr), Field: t, Operator: ko.observable(e.Operator), Value: ko.observable(e.Value1), Value2: ko.observable(e.Value2), LookupList: o, Apply: ko.observable(null == e.Apply || e.Apply), IsFilterOnFly: !0 === r }) }, s.RemoveField = function (e) { s.SelectedFields.remove(e) }, s.RemoveFilter = function (e) { s.Filters.remove(e) }, s.RemoveSeries = function (e) { s.AdditionalSeries.remove(e) }, s.FindField = function (r) { return $.grep(s.SelectedFields(), function (e) { return e.fieldId == r })[0] }, s.SaveWithoutRun = function () { s.RunReport(!0) }, s.BuildReportData = function (e) { return e = e || [], { ReportID: s.ReportID(), ReportName: s.ReportName(), ReportDescription: s.ReportDescription(), FolderID: s.FolderID(), SelectedFieldIDs: $.map(s.SelectedFields(), function (e) { return e.fieldId }), Filters: $.map(s.Filters(), function (e, r) { var o = e.Apply() && e.IsFilterOnFly || !e.IsFilterOnFly ? { SavedReportId: s.ReportID(), FieldId: e.Field().fieldId, AndOr: e.AndOr(), Operator: e.Operator(), Value1: Array.isArray(e.Value()) && "in" == e.Operator() ? e.Value().join(",") : 0 <= e.Operator().indexOf("blank") ? "blank" : e.Value(), Value2: e.Value2() } : null; return null == o || o.Value1 || o.Value2 || (o = null), o }), Series: $.map(s.AdditionalSeries(), function (e, r) { return { SavedReportId: s.ReportID(), FieldId: e.Field().fieldId, Operator: e.Operator(), Value: e.Value() } }), IncludeSubTotals: s.IncludeSubTotal(), ShowUniqueRecords: s.ShowUniqueRecords(), IsAggregateReport: !(0 < e.length) && s.AggregateReport(), ShowDataWithGraph: s.ShowDataWithGraph(), ShowOnDashboard: s.ShowOnDashboard(), SortBy: s.SortByField(), ReportType: s.ReportType(), GroupFunctionList: $.map(s.SelectedFields(), function (e) { return { FieldID: e.fieldId, GroupFunc: e.selectedAggregate(), FilterOnFly: e.filterOnFly(), Disabled: e.disabled(), GroupInGraph: e.groupInGraph(), HideInDetail: e.hideInDetail(), IsCustom: e.isFormulaField(), CustomLabel: e.fieldName, CustomFieldDetails: $.map(e.formulaItems(), function (e) { return { FieldId: e.fieldId(), IsParenthesesStart: e.isParenthesesStart() || !1, IsParenthesesEnd: e.isParenthesesEnd() || !1, Operation: e.formulaOperation(), ConstantValue: e.constantValue() } }) } }), DrillDownRow: e } }, s.RunReport = function (r) { r = !0 === r, s.validateReport() ? ajaxcall({ url: l.apiUrl + "/ReportApi/RunReport", type: "POST", data: JSON.stringify({ Account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, SaveReport: !!s.CanSaveReports() && s.SaveReport(), ReportJson: JSON.stringify(s.BuildReportData()), userId: l.userId }) }).done(function (e) { s.ReportID(e.reportId), s.SaveReport() && (toastr.success("Report Saved"), r && s.LoadAllSavedReports()), r || ("execute" == s.ReportMode() || "dashboard" == s.ReportMode() ? s.ExecuteReportQuery(e.sql, e.connectKey) : redirectToReport(l.runReportUrl, { reportId: e.reportId, reportName: s.ReportName(), reportDescription: s.ReportDescription(), includeSubTotal: s.IncludeSubTotal(), showUniqueRecords: s.ShowUniqueRecords(), aggregateReport: s.AggregateReport(), showDataWithGraph: s.ShowDataWithGraph(), reportSql: e.sql, connectKey: e.connectKey, reportFilter: JSON.stringify($.map(s.FlyFilters(), function (e) { return ko.toJS(e) })), reportType: s.ReportType(), selectedFolder: null != s.SelectedFolder() ? s.SelectedFolder().Id : 0 })) }) : toastr.error("Please correct validation issues") }, s.ExecuteReportQuery = function (o, t) { o && t && ajaxcall({ url: l.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: o, connectKey: t, reportType: s.ReportType(), pageNumber: s.pager.currentPage(), pageSize: s.pager.pageSize(), sortBy: s.pager.sortColumn() || "", desc: s.pager.sortDescending() || !1 }) }).done(function (e) { e.d && (e = e.d); var r = s.ReportResult(); r.HasError(e.HasError), r.Exception(e.Exception), r.Warnings(e.Warnings), r.ReportDebug(e.ReportDebug), r.ReportSql(e.ReportSql), e.ReportData.IsDrillDown = ko.observable(!1), $.each(e.ReportData.Rows, function (e, r) { r.DrillDownData = ko.observable(null), r.pager = new pagerViewModel({ pageSize: 10 }), r.sql = "", r.connectKey = "", r.changeSort = function (e) { return r.pager.changeSort(e), r.execute(), !1 }, r.isExpanded = ko.observable(!1), r.execute = function () { "" != r.sql && ajaxcall({ url: l.execReportUrl, type: "POST", data: JSON.stringify({ reportSql: r.sql, connectKey: r.connectKey, reportType: "List", pageNumber: r.pager.currentPage(), pageSize: r.pager.pageSize(), sortBy: r.pager.sortColumn() || "", desc: r.pager.sortDescending() || !1 }) }).done(function (e) { e.d && (e = e.d), e.ReportData.IsDrillDown = ko.observable(!0), r.DrillDownData(e.ReportData), r.pager.totalRecords(e.Pager.TotalRecords), r.pager.pages(e.Pager.TotalPages) }) }, r.expand = function () { ajaxcall({ url: l.apiUrl + "/ReportApi/RunDrillDownReport", type: "POST", data: JSON.stringify({ Account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, SaveReport: !1, ReportJson: JSON.stringify(s.BuildReportData(r.Items)), userId: l.userId }) }).done(function (e) { r.sql = e.sql, r.connectKey = e.connectKey, r.execute() }), r.isExpanded(!0) }, r.pager.currentPage.subscribe(function () { r.execute() }), r.collapse = function () { r.isExpanded(!1) }, r.toggle = function () { r.isExpanded() ? r.collapse() : r.expand() } }), r.ReportData(e.ReportData), s.pager.totalRecords(e.Pager.TotalRecords), s.pager.pages(e.Pager.TotalPages), s.currentSql(o), s.currentConnectKey(t), e.Warnings && toastr.info("Note: " + e.Warnings), s.isChart() && (google.charts.load("current", { packages: ["corechart"] }), google.charts.setOnLoadCallback(s.DrawChart)) }) }, s.ExpandAll = function () { $.each(s.ReportResult().ReportData().Rows, function (e, r) { r.expand() }) }, s.CollapseAll = function () { $.each(s.ReportResult().ReportData().Rows, function (e, r) { r.collapse() }) }, s.DrawChart = function () { if (s.isChart()) { var e = s.ReportResult().ReportData(), a = new google.visualization.DataTable, l = [], n = []; $.each(e.Columns, function (e, r) { var o = s.SelectedFields()[e]; 0 == e ? a.addColumn(r.IsNumeric ? "number" : "string", r.ColumnName) : o.groupInGraph() ? l.push({ index: e, column: r.ColumnName }) : r.IsNumeric && n.push({ index: e, column: r.ColumnName }) }), 0 == l.length && $.each(e.Columns, function (e, r) { 0 < e && r.IsNumeric && a.addColumn(r.IsNumeric ? "number" : "string", r.ColumnName) }); var i = [], d = []; $.each(e.Rows, function (e, r) { var t = []; $.each(r.Items, function (r, o) { if (0 == r) 0 < l.length && 0 < (t = $.grep(i, function (e) { return e[0] == o.Value })).length ? (i = i.filter(function (e) { return e[0] != o.Value }), t = t[0]) : t.push(o.Column.IsNumeric ? parseInt(o.Value) : o.Value); else if (0 < l.length) { 1 == $.grep(l, function (e) { return e.index == r }).length ? 0 == $.grep(d, function (e) { return e == o.Value }).length && (d.push(o.Value), $.each(n, function (e, r) { a.addColumn("number", o.Value + (0 == e ? "" : "-" + e)) })) : o.Column.IsNumeric && t.push(o.Column.IsNumeric ? parseInt(o.Value) : o.Value) } else o.Column.IsNumeric && t.push(o.Column.IsNumeric ? parseInt(o.Value) : o.Value) }), i.push(t) }), $.each(i, function (e, r) { if (r.length != a.getNumberOfColumns()) for (var o = 0; o <= a.getNumberOfColumns() - r.length; o++)r.push(0) }), a.addRows(i); var r = { title: s.ReportName(), animation: { startup: !0, duration: 1e3, easing: "out" } }, o = document.getElementById("chart_div_" + s.ReportID()), t = null; "Pie" == s.ReportType() && (t = new google.visualization.PieChart(o)), "Bar" == s.ReportType() && (t = new google.visualization.ColumnChart(o)), "Line" == s.ReportType() && (t = new google.visualization.LineChart(o)), "Map" == s.ReportType() && (t = new google.visualization.GeoChart(o)), t.draw(a, r) } }, s.loadFolders = function (o) { ajaxcall({ url: l.apiUrl + "/ReportApi/GetFolders", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, userId: l.userId } }).done(function (e) { if (s.Folders(e), s.SelectedFolder(null), o) { var r = $.grep(e, function (e) { return e.Id == o }); 0 < r.length && s.SelectedFolder(r[0]) } }) }, s.setupField = function (e) { e.selectedFieldName = e.tableName + " > " + e.fieldName, e.selectedAggregate = ko.observable(e.aggregateFunction), e.filterOnFly = ko.observable(e.filterOnFly), e.disabled = ko.observable(e.disabled), e.groupInGraph = ko.observable(e.groupInGraph), e.hideInDetail = ko.observable(e.hideInDetail), e.fieldAggregateWithDrilldown = e.fieldAggregate.concat("Only in Detail"), e.isFormulaField = ko.observable(e.isFormulaField); var o = []; return $.each(e.formulaItems || [], function (e, r) { o.push(new formulaFieldViewModel({ fieldId: r.fieldId || 0, isParenthesesStart: r.setupFormula ? r.setupFormula.isParenthesesStart() : r.isParenthesesStart, isParenthesesEnd: r.setupFormula ? r.setupFormula.isParenthesesEnd() : r.isParenthesesEnd, formulaOperation: r.setupFormula ? r.setupFormula.formulaOperation() : r.formulaOperation, constantValue: r.setupFormula ? r.setupFormula.constantValue() : r.constantValue })) }), e.formulaItems = ko.observableArray(o), e.setupFormula = new formulaFieldViewModel, e }, s.LoadReport = function (e, a) { return ajaxcall({ url: l.apiUrl + "/ReportApi/LoadReport", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, reportId: e, userId: l.userId } }).done(function (e) { s.ReportID(e.ReportID), s.ReportType(e.ReportType), s.ReportName(e.ReportName), s.ReportDescription(e.ReportDescription), s.FolderID(e.FolderID), $.each(e.SelectedFields, function (e, r) { r = s.setupField(r) }), s.SelectedFields(e.SelectedFields), s.ChosenFields([]), s.SelectFields([]), s.SelectedField(null), s.IncludeSubTotal(e.IncludeSubTotals), s.ShowUniqueRecords(e.ShowUniqueRecords), s.AggregateReport(e.IsAggregateReport), s.ShowDataWithGraph(e.ShowDataWithGraph), s.ShowOnDashboard(e.ShowOnDashboard), s.SortByField(e.SortBy), s.CanEdit(!(l.clientId && e.ClientId != l.clientId || l.userId && e.UserId != l.userId)), s.Filters([]), s.AdditionalSeries([]); var t = []; function r() { $.each(e.Filters, function (e, r) { if (t.indexOf(r.FieldId) < 0) { var o = 0 < $.grep(s.SelectedFields(), function (e) { return 1 == e.filterOnFly() && e.fieldId == r.FieldId }).length; o && t.push(r.FieldId), s.AddFilter(r, o) } }) } if (1 == a) { if (l.reportFilter && "[]" != l.reportFilter) { var o = JSON.parse(l.reportFilter); $.each(o, function (e, r) { t.indexOf(r.Field.fieldId) < 0 && (r.FieldId = r.Field.fieldId, r.Value1 = r.Value, t.push(r.FieldId), s.AddFilter(r, !0)) }) } r(), $.each($.grep(s.SelectedFields(), function (e) { return 1 == e.filterOnFly() && t.indexOf(e.fieldId) < 0 }), function (e, r) { s.AddFilter(null, !0), s.Filters()[s.Filters().length - 1].Field(r) }) } else r(); $.each(e.Series, function (e, r) { s.AddSeries(r) }), s.SaveReport(!a && s.CanEdit()), "execute" != s.ReportMode() && "dashboard" != s.ReportMode() || s.ExecuteReportQuery(l.reportSql, l.reportConnect) }) }, s.LoadAllSavedReports = function () { ajaxcall({ url: l.apiUrl + "/ReportApi/GetSavedReports", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, userId: l.userId } }).done(function (e) { $.each(e, function (e, r) { r.runMode = !1, r.openReport = function () { return s.LoadReport(r.reportId).done(function () { r.runMode ? (s.SaveReport(!1), s.RunReport(), r.runMode = !1) : s.ReportMode("generate") }) }, r.copyReport = function () { r.openReport().done(function () { s.ReportID(0), s.ReportName("Copy of " + s.ReportName()) }) }, r.runReport = function () { r.runMode = !0, r.openReport() }, r.deleteReport = function () { bootbox.confirm("Are you sure you would like to Delete this Report?", function (e) { e && ajaxcall({ url: l.apiUrl + "/ReportApi/DeleteReport", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId, reportId: r.reportId, userId: l.userId } }).done(function () { s.SavedReports.remove(r) }) }) }, 0 < l.reportId && r.reportId == l.reportId && (r.openReport(), l.reportWizard.modal("show")) }), s.SavedReports(e) }) }, "dashboard" != s.ReportMode() && (s.LoadAllSavedReports(), ajaxcall({ url: l.apiUrl + "/ReportApi/CanSaveReports", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId } }).done(function (e) { e = e || { allowUsersToCreateReports: !0, allowUsersToManageFolders: !0 }, s.CanSaveReports(e.allowUsersToCreateReports), s.CanManageFolders(e.allowUsersToManageFolders) })), s.changeSort = function (e) { return s.pager.changeSort(e), s.ExecuteReportQuery(s.currentSql(), s.currentConnectKey()), !1 }, s.isInputValid = function (e) { return (null == $(e).attr("data-notempty") || 0 != $(e).children("option").length) && (e.validity ? e.validity.valid : null == $(e).attr("required") || "" != $(e).val()) }, s.validateReport = function () { if (null != l.reportWizard) { var e = l.reportWizard.find("input,select"), r = !0; $(".form-group").removeClass("has-error"); for (var o = 0; o < e.length; o++)s.isInputValid(e[o]) || (r = !1, $(e[o]).closest(".form-group").addClass("has-error")); return r } }, s.loadTables = function () { ajaxcall({ url: l.apiUrl + "/ReportApi/GetTables", data: { account: l.accountApiToken, dataConnect: l.dataconnectApiToken, clientId: l.clientId } }).done(function (e) { s.Tables(e) }) }, s.init = function (e) { s.loadFolders(e), s.loadTables() } }, dashboardViewModel = function (t) { var a = this; a.reports = ko.observableArray([]), $.each(t.reports, function (e, r) { var o = new reportViewModel({ runReportUrl: t.runReportUrl, execReportUrl: t.execReportUrl, reportWizard: t.reportWizard, lookupListUrl: t.lookupListUrl, apiUrl: t.apiUrl, accountApiToken: t.accountApiToken, dataconnectApiToken: t.dataconnectApiToken, reportFilter: r.reportFilter, reportMode: "dashboard", reportSql: r.reportSql, reportId: r.reportId, reportConnect: r.connectKey }); a.reports.push(o), o.LoadReport(r.reportId, !0) }), a.drawChart = function () { $.each(a.reports(), function (e, r) { r.DrawChart() }) } };